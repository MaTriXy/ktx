import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

buildscript {
  repositories {
    jcenter()
    mavenCentral()
  }
  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:$nexusPluginVersion"
    classpath "com.netflix.nebula:gradle-extra-configurations-plugin:$configurationsPluginVersion"
    classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokkaVersion"
    classpath "org.junit.platform:junit-platform-gradle-plugin:$junitPlatformVersion"
  }
}

repositories {
  jcenter()
}

configurations {
  linter
}

dependencies {
  linter "com.pinterest:ktlint:$ktlintVersion"
}

apply plugin: 'distribution'
apply plugin: 'io.codearte.nexus-staging'

ext.libVersion = file('version.txt').text.trim()

subprojects {
  apply plugin: 'maven'
  apply plugin: 'kotlin'
  apply plugin: 'signing'
  apply plugin: 'nebula.provided-base'
  apply plugin: 'org.jetbrains.dokka'
  apply plugin: 'jacoco'

  ext {
    isReleaseVersion = !libVersion.endsWith('SNAPSHOT')
  }

  repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
  }

  sourceCompatibility = 1.6
  targetCompatibility = 1.6
  group = libGroup
  version = libVersion
  archivesBaseName = projectName

  compileKotlin {
    kotlinOptions {
      jvmTarget = "1.6"
      freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
    }
  }

  configurations {
    linter
  }

  dependencies {
    provided "com.badlogicgames.gdx:gdx:$gdxVersion"
    testCompile "junit:junit:$junitVersion"
    testCompile "io.kotlintest:kotlintest:$kotlinTestVersion"
    testCompile "com.nhaarman.mockitokotlin2:mockito-kotlin:$kotlinMockitoVersion"
    testCompile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    testCompile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    linter "com.pinterest:ktlint:$ktlintVersion"
  }

  task lint(type: JavaExec, group: 'verification') {
    description = 'Check Kotlin code style.'
    main = 'com.pinterest.ktlint.Main'
    classpath = configurations.linter
    args 'src/**/*.kt'
  }
  check.dependsOn lint

  task format(type: JavaExec, group: 'formatting') {
    description = 'Fix Kotlin code style.'
    main = 'com.pinterest.ktlint.Main'
    classpath = configurations.linter
    args '-F', 'src/**/*.kt'
  }

  tasks.withType(Test) {
    testLogging {
      events TestLogEvent.FAILED,
          TestLogEvent.SKIPPED,
          TestLogEvent.STANDARD_OUT
      exceptionFormat TestExceptionFormat.FULL
      showExceptions true
      showCauses true
      showStackTraces true

      debug {
        events TestLogEvent.STARTED,
            TestLogEvent.FAILED,
            TestLogEvent.PASSED,
            TestLogEvent.SKIPPED,
            TestLogEvent.STANDARD_ERROR,
            TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
      }
      info.events = debug.events
      info.exceptionFormat = debug.exceptionFormat
    }
  }

  jar {
    from project.sourceSets.main.output
    baseName = archivesBaseName
  }

  task dokkaZip(type: Zip) {
    from "$buildDir/dokka"
  }

  dokkaZip.dependsOn('dokka')

  task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from "$buildDir/dokka"
  }

  javadocJar.dependsOn('dokka')

  task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  artifacts {
    archives javadocJar, sourcesJar
  }

  tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
  }

  signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask('uploadArchives') }
    sign configurations.archives
  }

  task uploadSnapshot {}

  if (!isReleaseVersion) {
    uploadSnapshot.finalizedBy uploadArchives
  }

  uploadArchives {
    repositories {
      mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
          authentication(userName: ossrhUsername, password: ossrhPassword)
        }

        snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
          authentication(userName: ossrhUsername, password: ossrhPassword)
        }

        pom.project {
          name = projectName
          packaging 'jar'
          description = projectDesc
          url 'https://libktx.github.io/'

          licenses {
            license {
              name 'CC0-1.0'
              url 'https://creativecommons.org/publicdomain/zero/1.0/'
            }
          }

          scm {
            connection 'scm:git:git@github.com:libktx/ktx.git'
            developerConnection 'scm:git:git@github.com:libktx/ktx.git'
            url 'https://github.com/libktx/ktx/'
          }

          developers {
            developer {
              id 'mj'
              name 'MJ'
            }
          }
        }
      }
    }
  }
}

nexusStaging {
  packageGroup = libGroup
  username = ossrhUsername
  password = ossrhPassword
}

distributions {
  main {
    baseName = libVersion
    contents {
      project.subprojects.each { sub ->
        into('lib') {
          from sub.jar
        }
        into('src') {
          from sub.sourcesJar
        }
        into('doc') {
          from sub.dokkaZip
        }
      }
    }
  }
}

task gatherDokkaDocumentation(type: Copy) {
  subprojects.each { subproject ->
    from subproject.buildDir
    include "dokka/${subproject.name}/**"
    include "dokka/style.css"
  }
  into buildDir
}

task generateDocumentationIndex {
  doLast {
    def indexFile = file("$buildDir/dokka/index.html")
    delete indexFile
    indexFile << """
<html>
<head>
  <meta charset="utf-8">
  <title>KTX Sources Documentation</title>
  <link rel="stylesheet" href="style.css">
</head>
<body>
<ul>
  <h1>KTX Documentation</h1>
  <p>This page contains documentation generated via Dokka from KTX sources.</p>
  <p>To see the official KTX website, follow <a href="https://libktx.github.io/">this link</a>.</p>
  <h2>Modules</h2>
${
      subprojects.collect {
        "  <li><a href=\"${it.name}/\">ktx-${it.name}</a></li>"
      }.join('\n')
    }
</ul>
</body>
</html>
"""
  }
}
gatherDokkaDocumentation.finalizedBy generateDocumentationIndex

task linterIdeSetup(type: JavaExec) {
  description = 'Apply Kotlin code style changes to IntelliJ formatter.'
  main = 'com.pinterest.ktlint.Main'
  classpath = configurations.linter
  args 'applyToIDEAProject', '-y'
}
